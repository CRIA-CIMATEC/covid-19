"""feat: adds tables for document (DocumentModel|DocumentExpedition) and populate

Revision ID: dd9ff7c566bc
Revises: 47dc94e7bdae
Create Date: 2020-05-15 16:37:31.786359

"""
from sqlalchemy.engine.result import ResultProxy
from flask import current_app as app
from datetime import datetime
from alembic import op

import sqlalchemy as sa
import pandas as pd


# revision identifiers, used by Alembic.
revision = 'dd9ff7c566bc'
down_revision = '47dc94e7bdae'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    DocumentModel = op.create_table(
        'document_models',
        sa.Column(
            '_created', sa.DateTime(), nullable=True, default=sa.func.now()
        ),
        sa.Column(
            '_updated',
            sa.DateTime(),
            nullable=True,
            default=sa.func.now(),
            onupdate=sa.func.now(),
        ),
        sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
        sa.Column('code', sa.String(length=10), nullable=False),
        sa.Column('name', sa.String(length=100), nullable=False),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('code'),
        sa.UniqueConstraint('name'),
    )
    DocumentExpedition = op.create_table(
        'document_expeditions',
        sa.Column(
            '_created', sa.DateTime(), nullable=True, default=sa.func.now()
        ),
        sa.Column(
            '_updated',
            sa.DateTime(),
            nullable=True,
            default=sa.func.now(),
            onupdate=sa.func.now(),
        ),
        sa.Column('id', sa.DateTime(), nullable=False),
        sa.Column('locale_id', sa.Integer(), nullable=False),
        sa.Column('document_model_id', sa.Integer(), nullable=False),
        sa.Column('count', sa.Integer(), nullable=False),
        sa.Column('amount', sa.Float(), nullable=False),
        sa.ForeignKeyConstraint(
            ['document_model_id'], ['document_models.id'],
        ),
        sa.ForeignKeyConstraint(['locale_id'], ['locales.id'],),
        sa.PrimaryKeyConstraint('id', 'locale_id', 'document_model_id'),
    )
    # ### end Alembic commands ###

    bind = op.get_bind()
    meta = sa.MetaData(bind)
    State = sa.Table('states', meta, autoload=True)
    Locale = sa.Table('locales', meta, autoload=True)
    Country = sa.Table('countries', meta, autoload=True)

    date = datetime.now()
    # Populate State
    states = [
        {'_created': date, '_updated': date, 'name': 'Distrito Federal'},
        {'_created': date, '_updated': date, 'name': 'Acre'},
        {'_created': date, '_updated': date, 'name': 'Alagoas'},
        {'_created': date, '_updated': date, 'name': 'Amapa'},
        {'_created': date, '_updated': date, 'name': 'Amazonas'},
        {'_created': date, '_updated': date, 'name': 'Bahia'},
        {'_created': date, '_updated': date, 'name': 'Ceara'},
        {'_created': date, '_updated': date, 'name': 'Espirito Santo'},
        {'_created': date, '_updated': date, 'name': 'Goias'},
        {'_created': date, '_updated': date, 'name': 'Maranhao'},
        {'_created': date, '_updated': date, 'name': 'Mato Grosso'},
        {'_created': date, '_updated': date, 'name': 'Mato Grosso do Sul'},
        {'_created': date, '_updated': date, 'name': 'Minas Gerais'},
        {'_created': date, '_updated': date, 'name': 'Para'},
        {'_created': date, '_updated': date, 'name': 'Paraiba'},
        {'_created': date, '_updated': date, 'name': 'Parana'},
        {'_created': date, '_updated': date, 'name': 'Pernambuco'},
        {'_created': date, '_updated': date, 'name': 'Piaui'},
        {'_created': date, '_updated': date, 'name': 'Rio de Janeiro'},
        {'_created': date, '_updated': date, 'name': 'Rio Grande do Norte'},
        {'_created': date, '_updated': date, 'name': 'Rio Grande do Sul'},
        {'_created': date, '_updated': date, 'name': 'Rondonia'},
        {'_created': date, '_updated': date, 'name': 'Roraima'},
        {'_created': date, '_updated': date, 'name': 'Santa Catarina'},
        {'_created': date, '_updated': date, 'name': 'Sao Paulo'},
        {'_created': date, '_updated': date, 'name': 'Sergipe'},
        {'_created': date, '_updated': date, 'name': 'Tocantins'},
    ]
    op.bulk_insert(State, states)
    # end populate State

    brazil = bind.execute(Country.select(Country.c.name == 'Brazil')).first()
    states = bind.execute(State.select()).fetchall()

    # Populate Locale
    locales = [
        {
            '_created': date,
            '_updated': date,
            'country_id': brazil.id,
            'state_id': state.id,
        }
        for state in states
    ]
    op.bulk_insert(Locale, locales)
    # end populate Locale

    # Populate DocumentModel
    document_models = [
        {'code': 'NF-e', 'name': 'Nota Fiscal Eletrônica'},
        {'code': 'CT-e', 'name': 'Conhecimento de Transporte Eletrônico'},
        {'code': 'MDF-e', 'name': 'Manifesto de Transporte Fiscal Eletrônico'},
        {'code': 'NFC-e', 'name': 'Nota Fiscal de Consumidor Eletrônica'},
        {
            'code': 'CT-e OS',
            'name': 'Conhecimento de Transporte Eletrônico para outros serviços',
        },
        {'code': 'BP-e', 'name': 'Bilhete de Passagem Eletrônico'},
    ]
    op.bulk_insert(DocumentModel, document_models)
    # end populate DocumentModel

    # Populate DocumentExpedition
    sefaz_url = (
        'http://receitadados.fazenda.rs.gov.br/Documentos%20Compartilhados/'
        'Valor%20e%20quantidade%20de%20DFe%20por%20dia.csv'
    )

    cols = ['Modelo', 'Data', 'UF', 'Qtde Autorizados', 'Valor Autorizados']
    df = pd.read_csv(
        sefaz_url,
        sep=';',
        encoding='latin-1',
        usecols=cols,
        decimal=',',
        parse_dates=['Data'],
    )

    def _search(lst: ResultProxy, reg: {str: str}):
        """search reg: {'key': str, 'value': str}"""
        for r in lst:
            if isinstance(reg['value'], str):
                if reg['value'].lower() == r[reg['key']].lower():
                    return r.id

            if reg['value'] == r[reg['key']]:
                return r.id
        return None

    document_models = bind.execute(DocumentModel.select()).fetchall()
    brazil_locales = bind.execute(
        Locale.select(
            sa.and_(
                Locale.c.country_id == brazil.id, Locale.c.state_id.isnot(None)
            )
        )
    ).fetchall()

    document_expeditions = []
    for _, row in df.iterrows():
        state_name = str(row['UF'])
        state_id = _search(states, {'key': 'name', 'value': state_name})
        locale_id = _search(
            brazil_locales, {'key': 'state_id', 'value': state_id}
        )

        if locale_id is None:
            app.logger.warning(f'{state_name} not found in database')
            continue

        document_model_code = str(row['Modelo'])
        document_model_id = _search(
            document_models, {'key': 'code', 'value': document_model_code}
        )

        if document_model_id is None:
            app.logger.warning(f'{document_model_code} not found in database')
            continue

        document_expeditions.append(
            {
                'id': row['Data'],
                'locale_id': locale_id,
                'document_model_id': document_model_id,
                'count': int(row['Qtde Autorizados']),
                'amount': float(row['Valor Autorizados']),
            }
        )

    op.bulk_insert(DocumentExpedition, document_expeditions)
    # end populate DocumentExpedition


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('document_expeditions')
    op.drop_table('document_models')
    # ### end Alembic commands ###

    bind = op.get_bind()
    meta = sa.MetaData(bind)
    State = sa.Table('states', meta, autoload=True)
    Locale = sa.Table('locales', meta, autoload=True)

    states = bind.execute(State.select()).fetchall()
    for state in states:
        bind.execute(Locale.delete(Locale.c.state_id == state.id))

    bind.execute(State.delete())
