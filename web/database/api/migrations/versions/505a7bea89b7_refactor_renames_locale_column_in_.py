"""refactor: renames locale column in Covid[Case|Policy] and populate CovidCase

Revision ID: 505a7bea89b7
Revises: 81a91de431ad
Create Date: 2020-05-11 22:08:10.056047

"""
from sqlalchemy.engine.result import ResultProxy
from flask import current_app as app
from datetime import datetime
from alembic import op

import pandas as pd
import sqlalchemy as sa

# revision identifiers, used by Alembic.
revision = '505a7bea89b7'
down_revision = '81a91de431ad'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column(
        'covid_cases', sa.Column('locale_id', sa.Integer(), nullable=False)
    )
    op.drop_constraint(
        'covid_cases_locale_fkey', 'covid_cases', type_='foreignkey'
    )
    op.create_foreign_key(
        'covid_cases_locale_fkey',
        'covid_cases',
        'locales',
        ['locale_id'],
        ['id'],
    )
    op.drop_column('covid_cases', 'locale')
    op.add_column(
        'covid_policies', sa.Column('locale_id', sa.Integer(), nullable=False)
    )
    op.drop_constraint(
        'covid_policies_locale_fkey', 'covid_policies', type_='foreignkey'
    )
    op.create_foreign_key(
        'covid_policies_locale_fkey',
        'covid_policies',
        'locales',
        ['locale_id'],
        ['id'],
    )
    op.drop_column('covid_policies', 'locale')
    # ### end Alembic commands ###

    bind = op.get_bind()
    meta = sa.MetaData(bind)
    Locale = sa.Table('locales', meta, autoload=True)
    Country = sa.Table('countries', meta, autoload=True)
    CovidCase = sa.Table('covid_cases', meta, autoload=True)

    # Populate CovidCase
    jh_url = (
        'https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/'
        'csse_covid_19_data/csse_covid_19_time_series/{}'
    )
    datasets = dict(
        Confirmed='time_series_covid19_confirmed_global.csv',
        Recovered='time_series_covid19_recovered_global.csv',
        Deaths='time_series_covid19_deaths_global.csv',
    )
    df = {d: pd.read_csv(jh_url.format(datasets[d])) for d in datasets.keys()}

    # Update Hubei inconsistencies in confirmed
    hubei = {'2/12/20': 34874, '2/13/20': 51986, '2/14/20': 54406}
    for date, value in hubei.items():
        _filter = df['Confirmed']['Province/State'] == 'Hubei'
        df['Confirmed'].loc[_filter, date] = value

    def _diff_serie(dataframe: pd.DataFrame) -> pd.DataFrame:
        aux = dataframe.copy()
        df_diff = aux.iloc[:, 4:]
        df_diff = df_diff.T.diff().T
        df_diff.mask(df_diff < 0, 0, inplace=True)
        df_diff = pd.concat([aux.iloc[:, 0:4], df_diff.iloc[:, 1:]], axis=1)

        return df_diff

    df = {d: _diff_serie(df[d]) for d in df.keys()}

    dates = df['Confirmed'].columns[4:]
    df = {
        d: df[d].melt(
            id_vars=['Country/Region', 'Province/State', 'Lat', 'Long'],
            value_vars=dates,
            var_name='Date',
            value_name=d,
        )
        for d in df.keys()
    }

    aux = pd.merge(
        df['Confirmed'],
        df['Deaths'],
        on=['Country/Region', 'Province/State', 'Date', 'Lat', 'Long'],
        how='left',
    )
    df = pd.merge(
        aux,
        df['Recovered'],
        on=['Country/Region', 'Province/State', 'Date', 'Lat', 'Long'],
        how='left',
    )
    df['Date'] = pd.to_datetime(df['Date'])

    # correcting the nomenclature of some countries
    df['Country/Region'].replace('Korea, South', 'South Korea', inplace=True)
    df['Country/Region'].replace('Taiwan*', 'Taiwan', inplace=True)
    df['Country/Region'].replace('US', 'United States', inplace=True)

    df = df.groupby(['Date', 'Country/Region'], as_index=False).sum()
    df.drop(['Lat', 'Long'], inplace=True, axis=1)

    # adjustments of confirmed cases in China
    df.loc[
        (df['Country/Region'] == 'China') & (df['Date'] == '02/13/2020'),
        'Confirmed',
    ] = 1998
    soma = (
        df[df['Country/Region'] == 'China'][0:22]
        .groupby(['Country/Region'])['Confirmed']
        .sum()[0]
    )

    _f1 = df['Country/Region'] == 'China'
    _f2 = df['Date'] <= '02/13/2020'
    df.loc[_f1 & _f2, 'Confirmed'] += round(
        df.loc[_f1 & _f2, 'Confirmed'] * 15410 / soma
    )

    def _search(lst: ResultProxy, reg: {str: str}):
        """search reg: {'key': str, 'value': str}"""
        for r in lst:
            if reg['value'] == r[reg['key']]:
                return r.id
        return None

    countries = bind.execute(Country.select()).fetchall()
    locales = bind.execute(
        Locale.select(Locale.c.state_id.is_(None))
    ).fetchall()

    date = datetime.now()
    covid_cases = []
    for _, row in df.iterrows():
        country_name = str(row['Country/Region'])
        country_id = _search(countries, {'key': 'name', 'value': country_name})

        if country_id is None:
            app.logger.warning(f'{country_name} not found in database')
            continue

        locale_id = _search(
            locales, {'key': 'country_id', 'value': country_id}
        )

        covid_cases.append(
            {
                '_created': date,
                '_updated': date,
                'id': row['Date'],
                'locale_id': locale_id,
                'confirmed': int(row['Confirmed']),
                'recovered': int(row['Recovered']),
                'deaths': int(row['Deaths']),
            }
        )

    op.bulk_insert(CovidCase, covid_cases)
    # end populate CovidCase


def downgrade():
    bind = op.get_bind()
    meta = sa.MetaData(bind)
    CovidCase = sa.Table('covid_cases', meta, autoload=True)

    bind.execute(CovidCase.delete())

    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column(
        'covid_policies',
        sa.Column('locale', sa.INTEGER(), autoincrement=False, nullable=False),
    )
    op.drop_constraint(
        'covid_policies_locale_fkey', 'covid_policies', type_='foreignkey'
    )
    op.create_foreign_key(
        'covid_policies_locale_fkey',
        'covid_policies',
        'locales',
        ['locale'],
        ['id'],
    )
    op.drop_column('covid_policies', 'locale_id')
    op.add_column(
        'covid_cases',
        sa.Column('locale', sa.INTEGER(), autoincrement=False, nullable=False),
    )
    op.drop_constraint(
        'covid_cases_locale_fkey', 'covid_cases', type_='foreignkey'
    )
    op.create_foreign_key(
        'covid_cases_locale_fkey', 'covid_cases', 'locales', ['locale'], ['id']
    )
    op.drop_column('covid_cases', 'locale_id')
    # ### end Alembic commands ###
