"""feat: initial migration

Revision ID: 755b8ce64a63
Revises:
Create Date: 2020-05-10 17:48:01.025710

"""
from alembic import op
import sqlalchemy as sa

# revision identifiers, used by Alembic.
revision = '755b8ce64a63'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    Country = op.create_table(
        'countries',
        sa.Column(
            '_created', sa.DateTime(), nullable=True, default=sa.func.now()
        ),
        sa.Column(
            '_updated',
            sa.DateTime(),
            nullable=True,
            default=sa.func.now(),
            onupdate=sa.func.now(),
        ),
        sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
        sa.Column('name', sa.String(length=100), nullable=False),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('name'),
    )
    DensityMitigation = op.create_table(
        'densities_mitigation',
        sa.Column(
            '_created', sa.DateTime(), nullable=True, default=sa.func.now()
        ),
        sa.Column(
            '_updated',
            sa.DateTime(),
            nullable=True,
            default=sa.func.now(),
            onupdate=sa.func.now(),
        ),
        sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
        sa.Column('name', sa.String(length=100), nullable=False),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('name'),
    )
    FlagMitigation = op.create_table(
        'flags_mitigation',
        sa.Column(
            '_created', sa.DateTime(), nullable=True, default=sa.func.now()
        ),
        sa.Column(
            '_updated',
            sa.DateTime(),
            nullable=True,
            default=sa.func.now(),
            onupdate=sa.func.now(),
        ),
        sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
        sa.Column('name', sa.String(length=50), nullable=False),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('name'),
    )
    MigrationMeaure = op.create_table(
        'mitigation_measures',
        sa.Column(
            '_created', sa.DateTime(), nullable=True, default=sa.func.now()
        ),
        sa.Column(
            '_updated',
            sa.DateTime(),
            nullable=True,
            default=sa.func.now(),
            onupdate=sa.func.now(),
        ),
        sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
        sa.Column('code', sa.String(length=10), nullable=False),
        sa.Column('name', sa.String(length=100), nullable=False),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('code'),
        sa.UniqueConstraint('name'),
    )
    op.create_table(
        'states',
        sa.Column(
            '_created', sa.DateTime(), nullable=True, default=sa.func.now()
        ),
        sa.Column(
            '_updated',
            sa.DateTime(),
            nullable=True,
            default=sa.func.now(),
            onupdate=sa.func.now(),
        ),
        sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
        sa.Column('name', sa.String(length=100), nullable=False),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('name'),
    )
    Locale = op.create_table(
        'locales',
        sa.Column(
            '_created', sa.DateTime(), nullable=True, default=sa.func.now()
        ),
        sa.Column(
            '_updated',
            sa.DateTime(),
            nullable=True,
            default=sa.func.now(),
            onupdate=sa.func.now(),
        ),
        sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
        sa.Column('country_id', sa.Integer(), nullable=False),
        sa.Column('state_id', sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(['country_id'], ['countries.id'],),
        sa.ForeignKeyConstraint(['state_id'], ['states.id'],),
        sa.PrimaryKeyConstraint('id'),
    )
    op.create_table(
        'covid_cases',
        sa.Column(
            '_created', sa.DateTime(), nullable=True, default=sa.func.now()
        ),
        sa.Column(
            '_updated',
            sa.DateTime(),
            nullable=True,
            default=sa.func.now(),
            onupdate=sa.func.now(),
        ),
        sa.Column('id', sa.DateTime(), nullable=False),
        sa.Column('locale', sa.Integer(), nullable=False),
        sa.Column('confirmed', sa.Integer(), nullable=False),
        sa.Column('recovered', sa.Integer(), nullable=False),
        sa.Column('deaths', sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(['locale'], ['locales.id'],),
        sa.PrimaryKeyConstraint('id', 'locale'),
    )
    op.create_table(
        'covid_policies',
        sa.Column(
            '_created', sa.DateTime(), nullable=True, default=sa.func.now()
        ),
        sa.Column(
            '_updated',
            sa.DateTime(),
            nullable=True,
            default=sa.func.now(),
            onupdate=sa.func.now(),
        ),
        sa.Column('id', sa.DateTime(), nullable=False),
        sa.Column('locale', sa.Integer(), nullable=False),
        sa.Column('mitigation_measure_id', sa.Integer(), nullable=False),
        sa.Column('flag_mitigation_id', sa.Integer(), nullable=False),
        sa.Column('density_mitigation_id', sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ['density_mitigation_id'], ['densities_mitigation.id'],
        ),
        sa.ForeignKeyConstraint(
            ['flag_mitigation_id'], ['flags_mitigation.id'],
        ),
        sa.ForeignKeyConstraint(['locale'], ['locales.id'],),
        sa.ForeignKeyConstraint(
            ['mitigation_measure_id'], ['mitigation_measures.id'],
        ),
        sa.PrimaryKeyConstraint('id', 'locale', 'mitigation_measure_id'),
    )
    # ### end Alembic commands ###

    bind = op.get_bind()

    # Populate Country
    countries = [
        {'name': 'Afghanistan'},
        {'name': 'Albania'},
        {'name': 'Algeria'},
        {'name': 'Andorra'},
        {'name': 'Angola'},
        {'name': 'Antigua and Barbuda'},
        {'name': 'Argentina'},
        {'name': 'Armenia'},
        {'name': 'Australia'},
        {'name': 'Austria'},
        {'name': 'Azerbaijan'},
        {'name': 'Bahamas'},
        {'name': 'Bahrain'},
        {'name': 'Bangladesh'},
        {'name': 'Barbados'},
        {'name': 'Belarus'},
        {'name': 'Belgium'},
        {'name': 'Belize'},
        {'name': 'Benin'},
        {'name': 'Bhutan'},
        {'name': 'Bolivia'},
        {'name': 'Bosnia and Herzegovina'},
        {'name': 'Botswana'},
        {'name': 'Brazil'},
        {'name': 'Brunei'},
        {'name': 'Bulgaria'},
        {'name': 'Burkina Faso'},
        {'name': 'Burma'},
        {'name': 'Burundi'},
        {'name': 'Cabo Verde'},
        {'name': 'Cambodia'},
        {'name': 'Cameroon'},
        {'name': 'Canada'},
        {'name': 'Central African Republic'},
        {'name': 'Chad'},
        {'name': 'Chile'},
        {'name': 'China'},
        {'name': 'Colombia'},
        {'name': 'Comoros'},
        {'name': 'Congo (Brazzaville)'},
        {'name': 'Congo (Kinshasa)'},
        {'name': 'Costa Rica'},
        {'name': 'Cote d\'Ivoire'},
        {'name': 'Croatia'},
        {'name': 'Cuba'},
        {'name': 'Cyprus'},
        {'name': 'Czechia'},
        {'name': 'Denmark'},
        {'name': 'Diamond Princess'},
        {'name': 'Djibouti'},
        {'name': 'Dominica'},
        {'name': 'Dominican Republic'},
        {'name': 'Ecuador'},
        {'name': 'Egypt'},
        {'name': 'El Salvador'},
        {'name': 'Equatorial Guinea'},
        {'name': 'Eritrea'},
        {'name': 'Estonia'},
        {'name': 'Eswatini'},
        {'name': 'Ethiopia'},
        {'name': 'Fiji'},
        {'name': 'Finland'},
        {'name': 'France'},
        {'name': 'Gabon'},
        {'name': 'Gambia'},
        {'name': 'Georgia'},
        {'name': 'Germany'},
        {'name': 'Ghana'},
        {'name': 'Greece'},
        {'name': 'Grenada'},
        {'name': 'Guatemala'},
        {'name': 'Guinea'},
        {'name': 'Guinea-Bissau'},
        {'name': 'Guyana'},
        {'name': 'Haiti'},
        {'name': 'Holy See'},
        {'name': 'Honduras'},
        {'name': 'Hungary'},
        {'name': 'Iceland'},
        {'name': 'India'},
        {'name': 'Indonesia'},
        {'name': 'Iran'},
        {'name': 'Iraq'},
        {'name': 'Ireland'},
        {'name': 'Israel'},
        {'name': 'Italy'},
        {'name': 'Jamaica'},
        {'name': 'Japan'},
        {'name': 'Jordan'},
        {'name': 'Kazakhstan'},
        {'name': 'Kenya'},
        {'name': 'Kosovo'},
        {'name': 'Kuwait'},
        {'name': 'Kyrgyzstan'},
        {'name': 'Laos'},
        {'name': 'Latvia'},
        {'name': 'Lebanon'},
        {'name': 'Lesotho'},
        {'name': 'Liberia'},
        {'name': 'Libya'},
        {'name': 'Liechtenstein'},
        {'name': 'Lithuania'},
        {'name': 'Luxembourg'},
        {'name': 'MS Zaandam'},
        {'name': 'Madagascar'},
        {'name': 'Malawi'},
        {'name': 'Malaysia'},
        {'name': 'Maldives'},
        {'name': 'Mali'},
        {'name': 'Malta'},
        {'name': 'Mauritania'},
        {'name': 'Mauritius'},
        {'name': 'Mexico'},
        {'name': 'Moldova'},
        {'name': 'Monaco'},
        {'name': 'Mongolia'},
        {'name': 'Montenegro'},
        {'name': 'Morocco'},
        {'name': 'Mozambique'},
        {'name': 'Namibia'},
        {'name': 'Nepal'},
        {'name': 'Netherlands'},
        {'name': 'New Zealand'},
        {'name': 'Nicaragua'},
        {'name': 'Niger'},
        {'name': 'Nigeria'},
        {'name': 'North Macedonia'},
        {'name': 'Norway'},
        {'name': 'Oman'},
        {'name': 'Pakistan'},
        {'name': 'Panama'},
        {'name': 'Papua New Guinea'},
        {'name': 'Paraguay'},
        {'name': 'Peru'},
        {'name': 'Philippines'},
        {'name': 'Poland'},
        {'name': 'Portugal'},
        {'name': 'Qatar'},
        {'name': 'Romania'},
        {'name': 'Russia'},
        {'name': 'Rwanda'},
        {'name': 'Saint Kitts and Nevis'},
        {'name': 'Saint Lucia'},
        {'name': 'Saint Vincent and the Grenadines'},
        {'name': 'San Marino'},
        {'name': 'Sao Tome and Principe'},
        {'name': 'Saudi Arabia'},
        {'name': 'Senegal'},
        {'name': 'Serbia'},
        {'name': 'Seychelles'},
        {'name': 'Sierra Leone'},
        {'name': 'Singapore'},
        {'name': 'Slovakia'},
        {'name': 'Slovenia'},
        {'name': 'Somalia'},
        {'name': 'South Africa'},
        {'name': 'South Korea'},
        {'name': 'South Sudan'},
        {'name': 'Spain'},
        {'name': 'Sri Lanka'},
        {'name': 'Sudan'},
        {'name': 'Suriname'},
        {'name': 'Sweden'},
        {'name': 'Switzerland'},
        {'name': 'Syria'},
        {'name': 'Taiwan'},
        {'name': 'Tajikistan'},
        {'name': 'Tanzania'},
        {'name': 'Thailand'},
        {'name': 'Timor-Leste'},
        {'name': 'Togo'},
        {'name': 'Trinidad and Tobago'},
        {'name': 'Tunisia'},
        {'name': 'Turkey'},
        {'name': 'Uganda'},
        {'name': 'Ukraine'},
        {'name': 'United Arab Emirates'},
        {'name': 'United Kingdom'},
        {'name': 'United States'},
        {'name': 'Uruguay'},
        {'name': 'Uzbekistan'},
        {'name': 'Venezuela'},
        {'name': 'Vietnam'},
        {'name': 'West Bank and Gaza'},
        {'name': 'Western Sahara'},
        {'name': 'Yemen'},
        {'name': 'Zambia'},
        {'name': 'Zimbabwe'},
    ]
    op.bulk_insert(Country, countries)
    # end populate Country

    # Populate Locale
    op.bulk_insert(
        Locale, [{'country_id': c.id} for c in bind.execute(Country.select())]
    )
    # end populate Locale

    # Populate DensityMitigation
    densities_mitigation = [
        {'id': 0, 'name': 'Not applied'},
        {'id': 1, 'name': 'Recommended or low restriction'},
        {'id': 2, 'name': 'Required or medium restriction'},
        {'id': 3, 'name': 'Required or high restriction'},
        {'id': 4, 'name': 'Required or severe restriction'},
    ]
    op.bulk_insert(DensityMitigation, densities_mitigation)
    # end populate DensityMitigation

    # Populate FlagMitigation
    flags_mitigation = [
        {'id': 0, 'name': 'targeted'},
        {'id': 1, 'name': 'general'},
    ]
    op.bulk_insert(FlagMitigation, flags_mitigation)
    # end populate FlagMitigation

    # Populate MigrationMeaure
    mitigation_measures = [
        {'code': 'C1', 'name': 'school closure'},
        {'code': 'C2', 'name': 'workplace closure'},
        {'code': 'C3', 'name': 'cancellation of public events'},
        {'code': 'C4', 'name': 'restrictions on gathering size'},
        {'code': 'C5', 'name': 'public transport closures'},
        {'code': 'C6', 'name': 'stay-at-home requirements'},
        {'code': 'C7', 'name': 'restrictions on domestic/internal movement'},
        {'code': 'C8', 'name': 'restrictionsoninternationaltravel'},
        {'code': 'H1', 'name': 'public information campaign'},
        {'code': 'H2', 'name': 'testing policy'},
        {'code': 'H3', 'name': 'contact tracing policy'},
    ]
    op.bulk_insert(MigrationMeaure, mitigation_measures)
    # end populate MigrationMeasure


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('covid_policies')
    op.drop_table('covid_cases')
    op.drop_table('locales')
    op.drop_table('states')
    op.drop_table('mitigation_measures')
    op.drop_table('flags_mitigation')
    op.drop_table('densities_mitigation')
    op.drop_table('countries')
    # ### end Alembic commands ###
