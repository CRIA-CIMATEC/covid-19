"""refactor: changes nullable in CovidPolicy for flag_mitigation_id|density_mitigation_id ans populate CovidPolicy

Revision ID: 47dc94e7bdae
Revises: 505a7bea89b7
Create Date: 2020-05-12 14:45:55.079416

"""
from sqlalchemy.engine.result import ResultProxy
from flask import current_app as app
from datetime import datetime
from alembic import op

import pandas as pd
import sqlalchemy as sa

# revision identifiers, used by Alembic.
revision = '47dc94e7bdae'
down_revision = '505a7bea89b7'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column(
        'covid_policies',
        'density_mitigation_id',
        existing_type=sa.INTEGER(),
        nullable=True,
    )
    op.alter_column(
        'covid_policies',
        'flag_mitigation_id',
        existing_type=sa.INTEGER(),
        nullable=True,
    )
    # ### end Alembic commands ###

    bind = op.get_bind()
    meta = sa.MetaData(bind)
    Locale = sa.Table('locales', meta, autoload=True)
    Country = sa.Table('countries', meta, autoload=True)
    CovidPolicy = sa.Table('covid_policies', meta, autoload=True)
    MitigationMeasure = sa.Table('mitigation_measures', meta, autoload=True)

    # Populate CovidPolicy
    oxford_url = (
        'https://raw.githubusercontent.com/OxCGRT/covid-policy-tracker/master/'
        'data/timeseries/{}'
    )
    datasets = dict(
        C1='c1_schoolclosing.csv',
        C2='c2_workplaceclosing.csv',
        C3='c3_cancelpublicevents.csv',
        C4='c4_restrictionsongatherings.csv',
        C5='c5_closepublictransport.csv',
        C6='c6_stayathomerequirements.csv',
        C7='c7_domestictravel.csv',
        C8='c8_internationaltravel.csv',
        H1='h1_publicinfocampaign.csv',
        H2='h2_testingpolicy.csv',
        H3='h3_contacttracing.csv',
        C1_flag='c1_flag.csv',
        C2_flag='c2_flag.csv',
        C3_flag='c3_flag.csv',
        C4_flag='c4_flag.csv',
        C5_flag='c5_flag.csv',
        C6_flag='c6_flag.csv',
        C7_flag='c7_flag.csv',
        H1_flag='h1_flag.csv',
    )
    df = {
        d: pd.read_csv(
            oxford_url.format(datasets[d]),
            sep=",",
            encoding="latin",
            skipfooter=3,
            na_values=['.'],
            engine='python',
        )
        for d in datasets.keys()
    }

    dates = df['C1'].columns[2:]
    df = {
        d: df[d].melt(
            id_vars=['Unnamed: 0', 'Unnamed: 1'],
            value_vars=dates,
            var_name='Date',
            value_name=d,
        )
        for d in df.keys()
    }

    df = pd.concat([d for d in df.values()], axis=1)
    df = df.loc[:, ~df.columns.duplicated()]
    df["Date"] = pd.to_datetime(df["Date"])

    df.rename(
        columns={'Unnamed: 0': 'Country/Region', "Unnamed: 1": 'COD'},
        inplace=True,
    )
    df['Country/Region'].replace('Cape Verde', 'Cabo Verde', inplace=True)
    df['Country/Region'].replace(
        'Democratic Republic of Congo', 'Congo (Kinshasa)', inplace=True
    )
    df['Country/Region'].replace('Congo', 'Congo (Brazzaville)', inplace=True)
    df['Country/Region'].replace('Czech Republic', 'Czechia', inplace=True)
    df['Country/Region'].replace('Kyrgyz Republic', 'Kyrgyzstan', inplace=True)
    df['Country/Region'].replace('Slovak Republic', 'Slovakia', inplace=True)

    def _search(lst: ResultProxy, reg: {str: str}):
        """search reg: {'key': str, 'value': str}"""
        for r in lst:
            if reg['value'] == r[reg['key']]:
                return r.id
        return None

    countries = bind.execute(Country.select()).fetchall()
    locales = bind.execute(
        Locale.select(Locale.c.state_id.is_(None))
    ).fetchall()
    mitigation_measures = bind.execute(MitigationMeasure.select()).fetchall()
    mitigation_measures = [(mm.id, mm.code) for mm in mitigation_measures]

    date = datetime.now()
    covid_policies = []
    for _, row in df.iterrows():
        country_name = str(row['Country/Region'])
        country_id = _search(countries, {'key': 'name', 'value': country_name})

        if country_id is None:
            app.logger.warning(f'{country_name} not found in database')
            continue

        locale_id = _search(
            locales, {'key': 'country_id', 'value': country_id}
        )

        for code in mitigation_measures:
            mm_id, mm_code = code

            try:
                flag_m_id = int(row[f'{mm_code}_flag'])
            except (ValueError, KeyError):
                flag_m_id = None

            try:
                density_m_id = int(row[mm_code])
            except ValueError:
                density_m_id = None

            covid_policies.append(
                {
                    '_created': date,
                    '_updated': date,
                    'id': row['Date'],
                    'locale_id': locale_id,
                    'flag_mitigation_id': flag_m_id,
                    'mitigation_measure_id': mm_id,
                    'density_mitigation_id': density_m_id,
                }
            )

    op.bulk_insert(CovidPolicy, covid_policies)
    # end populate CovidPolicy


def downgrade():
    bind = op.get_bind()
    meta = sa.MetaData(bind)
    CovidPolicy = sa.Table('covid_policies', meta, autoload=True)

    bind.execute(CovidPolicy.delete())

    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column(
        'covid_policies',
        'flag_mitigation_id',
        existing_type=sa.INTEGER(),
        nullable=False,
    )
    op.alter_column(
        'covid_policies',
        'density_mitigation_id',
        existing_type=sa.INTEGER(),
        nullable=False,
    )
    # ### end Alembic commands ###
