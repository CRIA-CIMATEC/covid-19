"""feat: adds and populates Mobility and Mob models in the database

Revision ID: 9e65ac166b30
Revises: 1f9c7c0edf0d
Create Date: 2020-06-11 21:59:47.928395

"""
from sqlalchemy.engine.result import ResultProxy
from flask import current_app as app
from alembic import op

import sqlalchemy as sa
import pandas as pd


# revision identifiers, used by Alembic.
revision = '9e65ac166b30'
down_revision = '1f9c7c0edf0d'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    MobilityMeasure = op.create_table(
        'mobility_measures',
        sa.Column(
            '_created', sa.DateTime(), nullable=True, default=sa.func.now()
        ),
        sa.Column(
            '_updated',
            sa.DateTime(),
            nullable=True,
            default=sa.func.now(),
            onupdate=sa.func.now(),
        ),
        sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
        sa.Column('name', sa.String(length=100), nullable=False),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('name'),
    )
    MobilityReport = op.create_table(
        'mobility_reports',
        sa.Column(
            '_created', sa.DateTime(), nullable=True, default=sa.func.now()
        ),
        sa.Column(
            '_updated',
            sa.DateTime(),
            nullable=True,
            default=sa.func.now(),
            onupdate=sa.func.now(),
        ),
        sa.Column('id', sa.DateTime(), nullable=False),
        sa.Column('locale_id', sa.Integer(), nullable=False),
        sa.Column('mobility_measure_id', sa.Integer(), nullable=False),
        sa.Column('percent', sa.Float(), nullable=True),
        sa.ForeignKeyConstraint(['locale_id'], ['locales.id'],),
        sa.ForeignKeyConstraint(
            ['mobility_measure_id'], ['mobility_measures.id'],
        ),
        sa.PrimaryKeyConstraint('id', 'locale_id', 'mobility_measure_id'),
    )
    # ### end Alembic commands ###

    bind = op.get_bind()
    meta = sa.MetaData(bind)
    State = sa.Table('states', meta, autoload=True)
    Locale = sa.Table('locales', meta, autoload=True)
    Country = sa.Table('countries', meta, autoload=True)

    # Populate MobilityMeasure
    mobility_measures = [
        {'id': 0, 'name': 'retail and recreation'},
        {'id': 1, 'name': 'grocery and pharmacy'},
        {'id': 2, 'name': 'parks'},
        {'id': 3, 'name': 'transit stations'},
        {'id': 4, 'name': 'workplaces'},
        {'id': 5, 'name': 'residential'},
    ]
    op.bulk_insert(MobilityMeasure, mobility_measures)
    # end populate MobilityMeasure

    # Populate MobilityReport
    df_mobility = pd.read_csv(
        'https://www.gstatic.com/covid19/mobility/Global_Mobility_Report.csv',
        low_memory=False,
        parse_dates=['date'],
    )
    # Unused cols
    df_mobility.drop(
        columns=[
            'country_region_code',
            'iso_3166_2_code',
            'census_fips_code',
        ],
        inplace=True,
    )
    # Renames cols
    df_mobility.rename(
        columns={
            'country_region': 'Country/Region',
            'sub_region_1': 'State',
            'date': 'Date',
            'retail_and_recreation_percent_change_from_baseline': 'retail and recreation',
            'grocery_and_pharmacy_percent_change_from_baseline': 'grocery and pharmacy',
            'parks_percent_change_from_baseline': 'parks',
            'transit_stations_percent_change_from_baseline': 'transit stations',
            'workplaces_percent_change_from_baseline': 'workplaces',
            'residential_percent_change_from_baseline': 'residential',
        },
        inplace=True,
    )

    def _search(lst: ResultProxy, reg: {str: str}):
        """search reg: {'key': str, 'value': str}"""
        for r in lst:
            if isinstance(reg['value'], str):
                if reg['value'].lower() == r[reg['key']].lower():
                    return r.id

            if reg['value'] == r[reg['key']]:
                return r.id
        return None

    countries = bind.execute(Country.select()).fetchall()
    locales = bind.execute(
        Locale.select(Locale.c.state_id.is_(None))
    ).fetchall()
    states = bind.execute(State.select()).fetchall()

    mobility_reports = []
    df_mobility = df_mobility.loc[df_mobility['metro_area'].isna()]
    df_mobility = df_mobility.loc[df_mobility['sub_region_2'].isna()]
    df_mobility.drop(columns=['metro_area', 'sub_region_2'], inplace=True)

    # [COUNTRIES]
    # considering only countries
    df = df_mobility[df_mobility['State'].isna()].copy()
    df.drop(columns=['State'], inplace=True)

    # Renames countries
    df['Country/Region'].replace('The Bahamas', 'Bahamas', inplace=True)
    df['Country/Region'].replace(
        "Côte d'Ivoire", "Cote d'Ivoire", inplace=True
    )
    df['Country/Region'].replace('Cape Verde', 'Cabo Verde', inplace=True)
    df['Country/Region'].replace('Hong Kong', 'China', inplace=True)
    df['Country/Region'].replace('Myanmar (Burma)', 'Burma', inplace=True)

    for _, row in df.iterrows():
        country_name = str(row['Country/Region'])
        country_id = _search(countries, {'key': 'name', 'value': country_name})

        if country_id is None:
            app.logger.warning(f'{country_name} not found in database')
            continue

        locale_id = _search(
            locales, {'key': 'country_id', 'value': country_id}
        )

        for mm in mobility_measures:
            mobility_reports.append(
                {
                    'id': row['Date'],
                    'locale_id': locale_id,
                    'mobility_measure_id': mm['id'],
                    'percent': float(row[mm['name']]),
                }
            )

    # [BRAZIL]
    brazil = bind.execute(Country.select(Country.c.name == 'Brazil')).first()
    brazil_locales = bind.execute(
        Locale.select(
            sa.and_(
                Locale.c.country_id == brazil.id, Locale.c.state_id.isnot(None)
            )
        )
    ).fetchall()

    f1 = ~df_mobility['State'].isna()
    f2 = df_mobility['Country/Region'] == 'Brazil'
    df = df_mobility[f1 & f2].copy()

    df['State'].replace('State of Rondônia', 'Rondonia', inplace=True)
    df['State'].replace('State of Acre', 'Acre', inplace=True)
    df['State'].replace(
        'State of Rio Grande do Norte', 'Rio Grande do Norte', inplace=True
    )
    df['State'].replace('State of Amazonas', 'Amazonas', inplace=True)
    df['State'].replace('State of Roraima', 'Roraima', inplace=True)
    df['State'].replace('State of Pará', 'Para', inplace=True)
    df['State'].replace('State of Amapá', 'Amapa', inplace=True)
    df['State'].replace('State of Tocantins', 'Tocantins', inplace=True)
    df['State'].replace('State of Maranhão', 'Maranhao', inplace=True)
    df['State'].replace('State of Ceará', 'Ceara', inplace=True)
    df['State'].replace('State of Piauí', 'Piaui', inplace=True)
    df['State'].replace('State of Paraíba', 'Paraiba', inplace=True)
    df['State'].replace('State of Pernambuco', 'Pernambuco', inplace=True)
    df['State'].replace('State of Alagoas', 'Alagoas', inplace=True)
    df['State'].replace('State of Sergipe', 'Sergipe', inplace=True)
    df['State'].replace('State of Bahia', 'Bahia', inplace=True)
    df['State'].replace('State of Minas Gerais', 'Minas Gerais', inplace=True)
    df['State'].replace(
        'State of Espírito Santo', 'Espirito Santo', inplace=True
    )
    df['State'].replace(
        'State of Rio de Janeiro', 'Rio de Janeiro', inplace=True
    )
    df['State'].replace('State of São Paulo', 'Sao Paulo', inplace=True)
    df['State'].replace('State of Paraná', 'Parana', inplace=True)
    df['State'].replace(
        'State of Santa Catarina', 'Santa Catarina', inplace=True
    )
    df['State'].replace(
        'State of Rio Grande do Sul', 'Rio Grande do Sul', inplace=True
    )
    df['State'].replace(
        'State of Mato Grosso do Sul', 'Mato Grosso do Sul', inplace=True
    )
    df['State'].replace('State of Mato Grosso', 'Mato Grosso', inplace=True)
    df['State'].replace('State of Goiás', 'Goias', inplace=True)
    df['State'].replace('Federal District', 'Distrito Federal', inplace=True)

    for _, row in df.iterrows():
        state_name = str(row['State'])
        state_id = _search(states, {'key': 'name', 'value': state_name})
        locale_id = _search(
            brazil_locales, {'key': 'state_id', 'value': state_id}
        )

        if locale_id is None:
            app.logger.warning(f'{state_name} not found in database')
            continue

        for mm in mobility_measures:
            mobility_reports.append(
                {
                    'id': row['Date'],
                    'locale_id': locale_id,
                    'mobility_measure_id': mm['id'],
                    'percent': float(row[mm['name']]),
                }
            )

    op.bulk_insert(MobilityReport, mobility_reports)
    # end populate MobilityReport


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('mobility_reports')
    op.drop_table('mobility_measures')
    # ### end Alembic commands ###
