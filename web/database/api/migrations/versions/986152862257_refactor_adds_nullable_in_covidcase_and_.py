"""refactor: adds nullable in CovidCase and populates with state data

Revision ID: 986152862257
Revises: 9e65ac166b30
Create Date: 2020-06-12 17:13:18.420081

"""
from sqlalchemy.engine.result import ResultProxy
from flask import current_app as app
from datetime import datetime
from alembic import op

import sqlalchemy as sa
import pandas as pd
import numpy as np
import requests


# revision identifiers, used by Alembic.
revision = '986152862257'
down_revision = '9e65ac166b30'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column(
        'covid_cases', 'confirmed', existing_type=sa.INTEGER(), nullable=True
    )
    op.alter_column(
        'covid_cases', 'deaths', existing_type=sa.INTEGER(), nullable=True
    )
    op.alter_column(
        'covid_cases', 'recovered', existing_type=sa.INTEGER(), nullable=True
    )
    # ### end Alembic commands ###

    bind = op.get_bind()
    meta = sa.MetaData(bind)
    State = sa.Table('states', meta, autoload=True)
    Locale = sa.Table('locales', meta, autoload=True)
    Country = sa.Table('countries', meta, autoload=True)
    CovidCase = sa.Table('covid_cases', meta, autoload=True)

    # Populate CovidCase
    headers = {
        'Host': 'xx9p7hp1p7.execute-api.us-east-1.amazonaws.com',
        'User-Agent': 'Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:77.0) Gecko/20100101 Firefox/77.0',
        'Accept': 'application/json, text/plain, */*',
        'Accept-Language': 'en-US,en;q=0.5',
        'Accept-Encoding': 'gzip, deflate, br',
        'X-Parse-Application-Id': 'unAFkcaNDeXajurGB7LChj8SgQYS2ptm',
        'Origin': 'https://covid.saude.gov.br',
        'Connection': 'keep-alive',
        'Referer': 'https://covid.saude.gov.br/',
        'TE': 'Trailers',
    }
    json_with_url = requests.get(
        'https://xx9p7hp1p7.execute-api.us-east-1.amazonaws.com/prod/PortalGeral',
        headers=headers,
    )
    daily_covid_url = (
        json_with_url.json().get('results')[0].get('arquivo').get('url')
    )

    df = pd.read_excel(daily_covid_url, parse_dates=['data'])
    # Removes where is city and where not is State
    df = df[df['codmun'].isna()]
    df = df[~df['estado'].isna()]
    # Unused cols
    df.drop(
        columns=[
            'regiao',
            'municipio',
            'coduf',
            'codmun',
            'codRegiaoSaude',
            'nomeRegiaoSaude',
            'semanaEpi',
            'populacaoTCU2019',
            'casosAcumulado',
            'obitosAcumulado',
            'emAcompanhamentoNovos',
            'interior/metropolitana',
        ],
        inplace=True,
    )
    # Renames cols
    df.rename(
        columns={
            'estado': 'State',
            'data': 'Date',
            'casosNovos': 'Confirmed',
            'obitosNovos': 'Deaths',
            'Recuperadosnovos': 'Recovered',
        },
        inplace=True,
    )

    df['State'].replace('RO', 'Rondonia', inplace=True)
    df['State'].replace('AC', 'Acre', inplace=True)
    df['State'].replace('AM', 'Amazonas', inplace=True)
    df['State'].replace('RR', 'Roraima', inplace=True)
    df['State'].replace('PA', 'Para', inplace=True)
    df['State'].replace('AP', 'Amapa', inplace=True)
    df['State'].replace('TO', 'Tocantins', inplace=True)
    df['State'].replace('MA', 'Maranhao', inplace=True)
    df['State'].replace('CE', 'Ceara', inplace=True)
    df['State'].replace('PI', 'Piaui', inplace=True)
    df['State'].replace('PB', 'Paraiba', inplace=True)
    df['State'].replace('PE', 'Pernambuco', inplace=True)
    df['State'].replace('AL', 'Alagoas', inplace=True)
    df['State'].replace('SE', 'Sergipe', inplace=True)
    df['State'].replace('BA', 'Bahia', inplace=True)
    df['State'].replace('RN', 'Rio Grande do Norte', inplace=True)
    df['State'].replace('MG', 'Minas Gerais', inplace=True)
    df['State'].replace('ES', 'Espirito Santo', inplace=True)
    df['State'].replace('RJ', 'Rio de Janeiro', inplace=True)
    df['State'].replace('SP', 'Sao Paulo', inplace=True)
    df['State'].replace('PR', 'Parana', inplace=True)
    df['State'].replace('SC', 'Santa Catarina', inplace=True)
    df['State'].replace('RS', 'Rio Grande do Sul', inplace=True)
    df['State'].replace('MS', 'Mato Grosso do Sul', inplace=True)
    df['State'].replace('MT', 'Mato Grosso', inplace=True)
    df['State'].replace('GO', 'Goias', inplace=True)
    df['State'].replace('DF', 'Distrito Federal', inplace=True)

    def _int(value: str):
        return None if np.isnan(value) else int(value)

    def _search(lst: ResultProxy, reg: {str: str}):
        """search reg: {'key': str, 'value': str}"""
        for r in lst:
            if isinstance(reg['value'], str):
                if reg['value'].lower() == r[reg['key']].lower():
                    return r.id

            if reg['value'] == r[reg['key']]:
                return r.id
        return None

    states = bind.execute(State.select()).fetchall()
    brazil = bind.execute(Country.select(Country.c.name == 'Brazil')).first()
    brazil_locales = bind.execute(
        Locale.select(
            sa.and_(
                Locale.c.country_id == brazil.id, Locale.c.state_id.isnot(None)
            )
        )
    ).fetchall()

    date = datetime.now()
    covid_cases = []
    for _, row in df.iterrows():
        state_name = str(row['State'])
        state_id = _search(states, {'key': 'name', 'value': state_name})
        locale_id = _search(
            brazil_locales, {'key': 'state_id', 'value': state_id}
        )

        if locale_id is None:
            app.logger.warning(f'{state_name} not found in database')
            continue

        covid_cases.append(
            {
                '_created': date,
                '_updated': date,
                'id': row['Date'],
                'locale_id': locale_id,
                'confirmed': _int(row['Confirmed']),
                'recovered': _int(row['Recovered']),
                'deaths': _int(row['Deaths']),
            }
        )

    op.bulk_insert(CovidCase, covid_cases)
    # end populate CovidCase


def downgrade():
    bind = op.get_bind()
    meta = sa.MetaData(bind)
    Locale = sa.Table('locales', meta, autoload=True)
    Country = sa.Table('countries', meta, autoload=True)
    CovidCase = sa.Table('covid_cases', meta, autoload=True)

    brazil = bind.execute(Country.select(Country.c.name == 'Brazil')).first()
    brazil_locales = bind.execute(
        Locale.select().where(
            sa.and_(
                Locale.c.country_id == brazil.id, Locale.c.state_id.isnot(None)
            )
        )
    ).fetchall()

    for bl in brazil_locales:
        bind.execute(CovidCase.delete(CovidCase.c.locale_id == bl.id))

    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column(
        'covid_cases', 'recovered', existing_type=sa.INTEGER(), nullable=False
    )
    op.alter_column(
        'covid_cases', 'deaths', existing_type=sa.INTEGER(), nullable=False
    )
    op.alter_column(
        'covid_cases', 'confirmed', existing_type=sa.INTEGER(), nullable=False
    )
    # ### end Alembic commands ###
